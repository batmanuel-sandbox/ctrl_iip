ROOT:
### OCS Bridge to DMCS and Back
###############################


    ENTER_CONTROL:        
        MSG_TYPE: ENTER_CONTROL
        DEVICE: AR, PP, or CU
        ACK_ID:

    ENTER_CONTROL_ACK:
        MSG_TYPE: ENTER_CONTROL_ACK
        DEVICE: AR, PP, or CU
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    START:
        MSG_TYPE: START
        DEVICE: AR, PP, or CU
        CFG_KEY:

    START_ACK:
        MSG_TYPE: START
        DEVICE: AR, PP, or CU
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    STANDBY:
        MSG_TYPE: STANDBY
        DEVICE: AR, PP, or CU
        CFG_KEY:
        ACK_ID:
        
    STANDBY_ACK:
        MSG_TYPE: STANDBY_ACK
        DEVICE:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    DISABLE:
        MSG_TYPE: DISABLE
        DEVICE:
        ACK_ID:

    DISABLE_ACK:
        MSG_TYPE: DISABLE_ACK
        DEVICE:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    ENABLE:
        MSG_TYPE: ENABLE
        DEVICE:
        ACK_ID:

    ENABLE_ACK:
        MSG_TYPE: ENABLE_ACK
        DEVICE:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    SET_VALUE:
        MSG_TYPE: SET_VALUE
        DEVICE: AR, PP, or CU
        VALUE:
        ACK_ID:

    SET_VALUE_ACK:
        MSG_TYPE: SET_VALUE_ACK
        DEVICE: AR, PP, or CU
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    EXIT_CONTROL:
        MSG_TYPE: EXIT_CONTROL
        DEVICE: AR, PP, or CU
        ACK_ID:

    EXIT_CONTROL_ACK:
        MSG_TYPE: EXIT_CONTROL_ACK
        DEVICE: AR, PP, or CU
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    ABORT:
        MSG_TYPE: ABORT
        DEVICE: AR, PP, or CU
        ACK_ID:

    ABORT_ACK:
        MSG_TYPE: ABORT_ACK
        DEVICE: AR, PP, or CU
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    STOP:
        MSG_TYPE: STOP
        DEVICE: AR, PP, or CU
        ACK_ID:

    STOP_ACK:
        MSG_TYPE: STOP_ACK
        DEVICE: AR, PP, or CU
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    DMCS_NEXT_VISIT:
        MSG_TYPE: DMCS_NEXT_VISIT
        VISIT_ID: seq. num?
        BORE_SIGHT: TBD
        ACK_ID:

    DMCS_NEXT_VISIT_ACK:
        MSG_TYPE: DMCS_NEXT_VISIT_ACK
        ACK_BOOL:
        ACK_ID:

    DMCS_START_INTEGRATION:
        MSG_TYPE: DMCS_START_INTEGRATION
        IMAGE_ID: seq. num
        ACK_ID:

    DMCS_START_INTEGRATION_ACK:
        MSG_TYPE: DMCS_START_INTEGRATION_ACK
        IMAGE_ID:
        DEVICE:
        ACK_BOOL:
        ACK_ID:
        ACK_DESCRIPTION: tbd, if needed

    DMCS_READOUT:
        MSG_TYPE: DMCS_READOUT
        IMAGE_ID: 
        ACK_ID:

    DMCS_READOUT_ACK:
        MSG_TYPE: DMCS_READOUT_ACK
        IMAGE_ID:
        ACK_BOOL:
        ACK_ID:
        ACK_DESCRIPTION:

    SUMMARY_STATE_EVENT: 
        MSG_TYPE: SUMMARY_STATE_EVENT
        DEVICE:
        CURRENT_STATE:

    RECOMMENDED_SETTINGS_VERSION:
        MSG_TYPE: RECOMMENDED_SETTINGS_VERSION_EVENT
        DEVICE:
        CFG_KEY: <device>-NORMAL

    SETTINGS_APPLIED_EVENT:
        MSG_TYPE: SETTINGS_APPLIED_EVENT
        DEVICE:
        SETTING:
        APPLIED:  (Bool)

    APPLIED_SETTINGS_MATCH_START_EVENT:
        MSG_TYPE: APPLIED_SETTINGS_MATCH_START_EVENT
        DEVICE:
        SETTING:
        APPLIED:  (Bool)

    ERROR_CODE_EVENT:
        MSG_TYPE: ERROR_CODE_EVENT
        DEVICE:
        ERROR_CODE:  (Long Int)

    SYSTEM_HEALTH:
        MSG_TYPE: SYSTEM_HEALTH
        ACK_ID:

    SYSTEM_HEALTH_ACK:
        MSG_TYPE: SYSTEM_HEALTH_ACK
        ACK_BOOL: True of False
        ACK_DESCRIPTION: tbd, if needed (ACK_BOOL is False)



### DMCS to PP Foreman and Back
###############################


    PP_NEW_SESSION:
        MSG_TYPE: PP_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response

    PP_NEW_SESSION_ACK:
        MSG_TYPE: PP_NEW_SESSION_ACK
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
       
    PP_NEXT_VISIT: 
        MSG_TYPE: PP_NEXT_VISIT
        VISIT_ID:  Issued by a TCS event
        BORE_SIGHT:  "231,123786456342, -45.3457156906, FK5"
        SESSION_ID:    Current Session ID
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: Unique tag + number from DMCS returned in response

    PP_NEXT_VISIT_ACK:
        MSG_TYPE: PP_NEXT_VISIT_ACK
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
       
    PP_START_INTEGRATION:
        MSG_TYPE: PP_START_INTEGRATION
        JOB_NUM: 6    Sequence assigned by DMCS
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        CCD_LIST:    List of CCDs to be fetched and dispatched for this job
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_START_INTEGRATION_ACK:
        MSG_TYPE: PP_START_INTEGRATION_ACK
        JOB_NUM:
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
       
    PP_READOUT:
        MSG_TYPE: PP_READOUT
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_READOUT_ACK:
        MSG_TYPE: PP_READOUT_ACK
        COMPONENT:
        JOB_NUM:
        ACK_BOOL:
        ACK_ID:

        
    # Prompt Processing Foreman to/from Forwarder Messages

    PP_FWDR_HEALTH_CHECK:        
        MSG_TYPE: PP_FWDR_HEALTH_CHECK
        JOB_NUM: 6
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by PP Foreman)

    PP_FWDR_HEALTH_CHECK_ACK:
        MSG_TYPE: PP_FWDR_HEALTH_CHECK_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Forwarder answering...such as 'FORWARDER_3')
        ACK_BOOL: True
        ACK_ID: (Sequence number as a string generated by Base Foreman returned...)

    PP_FWDR_XFER_PARAMS:
        MSG_TYPE: PP_FWDR_XFER_PARAMS
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        XFER_PARAMS:  
            CCD_LIST: 
            DISTRIBUTOR:
                FQN: Distributor_1
                HOSTNAME: D1
                IP_ADDR: 141.142.237.161
                NAME: D1
                TARGET_DIR: /dev/null

    PP_FWDR_XFER_PARAMS_ACK:
        MSG_TYPE: PP_FWDR_XFER_PARAMS_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Forwarder answering...such as 'FORWARDER_3')
        ACK_BOOL: True
        ACK_ID: (Sequence number as a string generated by Base Foreman returned...)

    PP_FWDR_READOUT:
        MSG_TYPE: PP_FWDR_READOUT
        JOB_NUM: 6
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_FWDR_READOUT_ACK:
        MSG_TYPE: PP_FWDR_READOUT_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Forwarder answering...such as 'FORWARDER_3')
        ACK_BOOL: TRUE
        ACK_ID:  A string formed from Base Foreman's sequence number returned...



    NCSA_NEW_SESSION:
        MSG_TYPE: NCSA_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response
       
    NCSA_NEXT_VISIT:
        MSG_TYPE: NCSA_NEXT_VISIT
        VISIT_ID:  Sequence number derived by TCS
        BORE_SIGHT:  "231,123786456342, -45.3457156906, FK5"
        SESSION_ID:    Current Session ID
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: Unique number from PP Foreman to be returned in response
        
    NCSA_START_INTEGRATION:
        MSG_TYPE: NCSA_START_INTEGRATION
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number generated by Base Foreman)
        FORWARDERS: 
            FORWARDER_LIST: 
            CCD_LIST: # A list of lists, each main list index refers to the same index on FORWARDER_LIST.

    NCSA_START_INTEGRATION_ACK:
        MSG_TYPE: NCSA_START_INTEGRATION_ACK
        JOB_NUM: 6
        VISIT_ID:
        IMAGE_ID:
        SESSION_ID:
        COMPONENT: NCSA_FOREMAN
        ACK_BOOL: (TRUE if resources are available -  FALSE if insufficient resources)
        ACK_ID: Sequence number in string form chosen by the Base Foreman and returned here.
        FAIL_DETAILS: Optional, details about insufficient resources
        PAIRS: #A list of dictionaries
            #When testing via pytest, dictionaries below are sent one at a time to check shape
            #with a special entry in this list called PAIRS, as the number of forwarders will vary
            #
            #FORWARDER: FORWARDER_1
            #CCD_LIST:
            #DISTRIBUTOR:
            #    FQN: 
            #    HOSTNAME:
            #    IP_ADDR: 
            #    NAME: 
            #    TARGET_DIR: 
            #
            #FORWARDER: FORWARDER_2
            #CCD_LIST: 
            #DISTRIBUTOR:
            #    FQN: 
            #    HOSTNAME:
            #    IP_ADDR:
            #    NAME: 
            #    TARGET_DIR:

    # Used for checking a part of the NCSA_START_INTEGRATION_ACK message above
    PAIR:
        FORWARDER:
        CCD_LIST:
        DISTRIBUTOR:
            FQN:
            HOSTNAME:
            IP_ADDR:
            NAME:
            TARGET_DIR:
    

    NCSA_READOUT:
        MSG_TYPE: NCSA_READOUT
        VISIT_ID:
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID:

    NCSA_READOUT_ACK:
        MSG_TYPE: NCSA_READOUT_ACK
        VISIT_ID:
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        COMPONENT: NCSA_FOREMAN
        ACK_BOOL:
        ACK_ID:
        RESULT_LIST:
            CCD_LIST:
            RECEIPT_LIST:

        
        
#   NCSA Foreman Messages to/from Distributors

    DISTRIBUTOR_HEALTH_CHECK: 
        MSG_TYPE: DISTRIBUTOR_HEALTH_CHECK
        JOB_NUM: 6
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by NCSA Foreman)

    DISTRIBUTOR_HEALTH_CHECK_ACK:
        MSG_TYPE: DISTRIBUTOR_HEALTH_CHECK_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Distributor answering...such as 'DISTRIBUTOR_7')
        ACK_BOOL: 
        ACK_ID:  

    DISTRIBUTOR_XFER_PARAMS:
        MSG_TYPE: DISTRIBUTOR_XFER_PARAMS
        JOB_NUM: 6
        VISIT_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        XFER_PARAMS:  These parameters are a dict of individual Distributor params

    DISTRIBUTOR_XFER_PARAMS_ACK:
        MSG_TYPE: DISTRIBUTOR_XFER_PARAMS_ACK
        JOB_NUM: 6
        COMPONENT:
        ACK_BOOL:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    DISTRIBUTOR_READOUT:
        MSG_TYPE: DISTRIBUTOR_READOUT
        JOB_NUM: 6
        REPLY_QUEUE: 'ncsa_foreman_ack_publish'
        ACK_ID: Unique sequence number appended to string for each timed ACK event

    DISTRIBUTOR_READOUT_ACK:
        MSG_TYPE: DISTRIBUTOR_READOUT_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Distributor answering...such as 'DISTRIBUTOR_2')
        ACK_BOOL: TRUE
        ACK_ID:  A string formed from Base Foreman's sequence number returned...
        RESULT_LIST:
            CCD_LIST: 
            RECEIPT_LIST: Alphanumeric receipt or 'none' for failure





#        --------------------------------------------------------------------------
#        Msg # BR28 Bridge to DMCS - Next Visit Telemetry
#        MSG_TYPE: NEXT_VISIT_DATA
#        VISIT_ID: seq. num
#        DATA: Metadata necessary for Primary Header data. Applies to all exposures in this visit.
#        --------------------------------------------------------------------------
#        Msg # BR29 Bridge to DMCS - Start Integration Telemetry
#        MSG_TYPE: START_INTEGRATION_DATA
#        IMAGE_ID:
#        DATA: Metadata used for each CCD such as filters, exposure time, etc. to be joined with DM CCD specific info like CCD number...
#        --------------------------------------------------------------------------
#        Msg # BR30 DMCS to Bridge - Results Telemetry
#        MSG_TYPE: RESULTS
#        IMAGE_ID:
#        RESULTS_BOOL: True if everything was successful
#        FAIL_DETAILS: tbd, if ACK_BOOL is False
#        --------------------------------------------------------------------------
#        Msg # BR31 Bridge to Bridge - Book Keeping
#        MSG_TYPE: BOOK_KEEPING
#        ACK_ID: 
#        ACK_DELAY: 
#        CHECKBOX: true/false 
#        TIME:
#        CMD_ID: 
#        DEVICE: AR, PP or CU
#        --------------------------------------------------------------------------
#        Msg # BR32 Bridge to Bridge - Resolving un-acked messages 
#        MSG_TYPE: RESOLVE_ACK
####        --------------------------------------------------------------------------

    AR_NEW_SESSION:
        MSG_TYPE: AR_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response
       
    AR_NEW_SESSION_ACK:
        MSG_TYPE: AR_NEW_SESSION_ACK    
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID: unique sequence number to be returned with response
       
    AR_NEXT_VISIT: 
        MSG_TYPE: AR_NEXT_VISIT
        VISIT_ID:  Issued by a TCS event
        BORE_SIGHT:  "231,123786456342, -45.3457156906, FK5"
        SESSION_ID:    Current Session ID
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: Unique tag + number from DMCS returned in response

    AR_NEXT_VISIT_ACK: 
        MSG_TYPE: AR_NEXT_VISIT_ACK
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID: Unique tag + number from DMCS returned in response

    AR_START_INTEGRATION:
        MSG_TYPE: AR_START_INTEGRATION
        JOB_NUM: 6    Sequence assigned by DMCS
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        CCD_LIST:    List of CCDs to be fetched and dispatched for this job
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    AR_START_INTEGRATION_ACK:
        MSG_TYPE: AR_START_INTEGRATION_ACK
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        VISIT_ID:
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID:

    AR_READOUT:
        MSG_TYPE: AR_READOUT
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    AR_READOUT_ACK:
        MSG_TYPE: AR_READOUT_ACK
        JOB_NUM: 6
        COMPONENT:
        ACK_BOOL:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        RESULT_LIST:
            CCD_LIST:
            RECEIPT_LIST:


#Msg # AR1: Archive Health Check from Base Archive Foreman to Archive Controller 
#MSG_TYPE: ARCHIVE_HEALTH_CHECK
#SESSION_ID: num from OCS (if archive wants it...for dir name?
#ACK_ID: seq. num
#-------------------------------------------------
#Msg # AR2: Archive Health Check ACK from Archive Controller to Base Archive Foreman
#MSG_TYPE: ARCHIVE_HEALTH_CHECK_ACK
#ACK_BOOL: True or False
#ACK_ID: return seq. num


    AR_FWDR_HEALTH_CHECK:
        MSG_TYPE: AR_FWDR_HEALTH_CHECK
        REPLY_QUEUE: 'ar_foreman_ack_publish'
        ACK_ID:

    AR_FWDR_HEALTH_CHECK_ACK:
        MSG_TYPE: AR_FWDR_HEALTH_CHECK_ACK
        COMPONENT:
        ACK_BOOL:
        ACK_ID:

    NEW_ARCHIVE_ITEM:
        MSG_TYPE: NEW_ARCHIVE_ITEM
        JOB_NUM:
        SESSION_ID: num from OCS
        VISIT_ID: num from OCS
        IMAGE_ID: num from OCS
        REPLY_QUEUE: 'ar_foreman_ack_publish'
        ACK_ID: seq. num


    NEW_ARCHIVE_ITEM_ACK:
        MSG_TYPE: NEW_ARCHIVE_ITEM_ACK
        COMPONENT: ARCHIVE_CTRL
        ACK_ID: return seq. number
        TARGET_DIR: Path of intended location


    AR_FWDR_XFER_PARAMS:
        MSG_TYPE: AR_FWDR_XFER_PARAMS
        JOB_NUM:
        IMAGE_ID: num from OCS
        TARGET_DIR: Where to put file in archive
        SESSION_ID:
        VISIT_ID:
        IMAGE_ID:
        ACK_ID: seq. num
        REPLY_QUEUE:
        XFER_PARAMS:
            CCD_LIST: List of ccds to transfer
            FQN: ARCHIVE
            NAME: Login name of receiving entity
            IP_ADDR:


    AR_FWDR_XFER_PARAMS_ACK:
        MSG_TYPE: AR_FWDR_XFER_PARAMS_ACK
        COMPONENT:
        ACK_ID: seq. num returned


    AR_FWDR_READOUT:
        MSG_TYPE: AR_FWDR_READOUT
        JOB_NUM:
        SESSION_ID:
        VISIT_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID: seq. num


    AR_FWDR_READOUT_ACK:
        MSG_TYPE: AR_FWDR_READOUT_ACK
        COMPONENT:
        JOB_NUM:
        IMAGE_ID:
        ACK_ID: return seq. num
        ACK_BOOL:
        RESULT_LIST:
            CCD_LIST: Ordered list of CCDs - index is shared with lists below 
            FILENAME_LIST: Ordered list of Path plus filename used for the transfer
            CHECKSUM_LIST: Ordered list of File checksum value


    AR_ITEMS_XFERD:
        MSG_TYPE: AR_ITEMS_XFERD
        ACK_ID: seq. num
        IMAGE_ID:
        REPLY_QUEUE:
        RESULT_LIST:
            CCD_LIST: Index shared in corrospondence with lists below
            FILENAME_LIST: Path plus filename used for the transfer
            CHECKSUM_LIST: File checksum values


    AR_ITEMS_XFERD_ACK:
        MSG_TYPE: AR_ITEMS_XFERD_ACK
        COMPONENT: ARCHIVE_CTRL
        IMAGE_ID: 
        ACK_ID: return seq. number
        ACK_BOOL:
        RESULT_LIST:
            CCD_LIST: 
            RECEIPT_LIST: Alphanumeric receipt or 'none' for failure




